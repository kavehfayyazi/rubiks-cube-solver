import pytest
from src.cube.pieces import CubePieces, tuple_to_cube
from src.cube.faces import CubeFaces
from src.cube.translator import faces_to_pieces, pieces_to_faces

def test_pieces():
    pieces = CubePieces()
    faces = CubeFaces()
    assert faces_to_pieces(faces).return_pieces() == pieces.return_pieces()
    assert pieces_to_faces(pieces).return_faces() == faces.return_faces()
    assert pieces.is_solved()
    assert pieces.move('').is_solved()

    pieces_inverse = CubePieces()
    assert pieces_inverse.move("U U'").is_solved()
    assert pieces_inverse.move("U' U").is_solved()
    assert pieces_inverse.move("B B'").is_solved()
    assert pieces_inverse.move("B' B").is_solved()
    assert pieces_inverse.move("L L'").is_solved()
    assert pieces_inverse.move("L' L").is_solved()
    assert pieces_inverse.move("R R'").is_solved()
    assert pieces_inverse.move("R' R").is_solved()
    assert pieces_inverse.move("F F'").is_solved()
    assert pieces_inverse.move("F' F").is_solved()
    assert pieces_inverse.move("B B'").is_solved()
    assert pieces_inverse.move("B' B").is_solved()

    pieces_doubles = CubePieces()

    assert pieces_doubles.move("U2 U2").is_solved()
    assert pieces_doubles.move("D2 D2").is_solved()
    assert pieces_doubles.move("L2 L2").is_solved()
    assert pieces_doubles.move("R2 R2").is_solved()
    assert pieces_doubles.move("F2 F2").is_solved()
    assert pieces_doubles.move("B2 B2").is_solved()

    pieces_around = CubePieces()
    pieces_around = pieces_around.move("U U U2")
    assert pieces_around.is_solved()
    pieces_around = pieces_around.move("D D D2")
    assert pieces_around.is_solved()
    pieces_around = pieces_around.move("L L L2")
    assert pieces_around.is_solved()
    pieces_around = pieces_around.move("R R R2")
    assert pieces_around.is_solved()
    pieces_around = pieces_around.move("F F F2")
    assert pieces_around.is_solved()
    pieces_around = pieces_around.move("B B B2")
    assert pieces_around.is_solved()

    pieces_single = CubePieces()
    pieces_single = pieces_single.move("U")
    assert not pieces_single.is_solved()
    pieces_single = pieces_single.move("U")
    assert not pieces_single.is_solved()
    pieces_single = pieces_single.move("U")
    assert not pieces_single.is_solved()
    pieces_single = pieces_single.move("U")
    assert pieces_single.is_solved()
    pieces_single = pieces_single.move("D")
    assert not pieces_single.is_solved()
    pieces_single = pieces_single.move("D")
    assert not pieces_single.is_solved()
    pieces_single = pieces_single.move("D")
    assert not pieces_single.is_solved()
    pieces_single = pieces_single.move("D")
    assert pieces_single.is_solved()
    pieces_single = pieces_single.move("L")
    assert not pieces_single.is_solved()
    pieces_single = pieces_single.move("L")
    assert not pieces_single.is_solved()
    pieces_single = pieces_single.move("L")
    assert not pieces_single.is_solved()
    pieces_single = pieces_single.move("L")
    assert pieces_single.is_solved()
    pieces_single = pieces_single.move("R")
    assert not pieces_single.is_solved()
    pieces_single = pieces_single.move("R")
    assert not pieces_single.is_solved()
    pieces_single = pieces_single.move("R")
    assert not pieces_single.is_solved()
    pieces_single = pieces_single.move("R")
    assert pieces_single.is_solved()
    pieces_single = pieces_single.move("F")
    assert not pieces_single.is_solved()
    pieces_single = pieces_single.move("F")
    assert not pieces_single.is_solved()
    pieces_single = pieces_single.move("F")
    assert not pieces_single.is_solved()
    pieces_single = pieces_single.move("F")
    assert pieces_single.is_solved()
    pieces_single = pieces_single.move("B")
    assert not pieces_single.is_solved()
    pieces_single = pieces_single.move("B")
    assert not pieces_single.is_solved()
    pieces_single = pieces_single.move("B")
    assert not pieces_single.is_solved()
    pieces_single = pieces_single.move("B")
    assert pieces_single.is_solved()

    pieces_misc = CubePieces()
    assert tuple_to_cube(pieces_misc.return_pieces()).is_solved()